Gabarito: Exerc√≠cios - agora a pr√°tica
Exerc√≠cio 1
O primeiro server que vamos utilizar √© o nosso velho amigo HTTP, na camada de aplica√ß√£o. Voc√™ pode tanto criar um, quanto utilizar um dos projetos ou exerc√≠cios dos m√≥dulos anteriores. A ideia √© utilizarmos os conhecimentos do conte√∫do e a ferramenta cURL para realizarmos uma chamada HTTP para ele. O projeto deve ter rotas GET e POST para que seja poss√≠vel enviar requisi√ß√µes para os endpoints e receber respostas, assim como j√° nos acostumamos a receber via browser ou utilizando programas como o Postman.

Caso tenha dificuldades maiores, voc√™ pode utilizar o Postman para converter uma requisi√ß√£o em cURL, √© s√≥ fazer a requisi√ß√£o nele como voc√™ j√° sabe e depois clicar no bot√£o code (que fica embaixo do save) e escolher cURL.

Fa√ßa uma chamada GET, utilizando o cURL.

Fa√ßa uma chamada POST, utilizando o cURL, passando um JSON no body da requisi√ß√£o.

Fa√ßa uma chamada qualquer, utilizando o cURL, passando um header na requisi√ß√£o.

Solu√ß√£o proposta
Fa√ßa uma chamada GET, utilizando o cURL.


 curl localhost:3000
Ou use:


 curl -X GET localhost:3000
 
Fa√ßa uma chamada POST, utilizando o cURL, passando um JSON no body da requisi√ß√£o.


 curl -X POST \
     -H 'Content-Type: application/json' \
     -d '{ "foo": "bar" }' \
     localhost:3000
Fa√ßa uma chamada qualquer, utilizando o cURL, passando um header na requisi√ß√£o.


curl --request POST \
    --header 'Content-Type: application/json' \
    --header 'Authorization: ApiKey EXAMPLE-TOKEN' \
    --data '{ "foo": "bar" }' \
    localhost:3000
Exerc√≠cio 2
Ainda utilizando o cURL, vamos explorar mais alguns conceitos do HTTP. Relembre que falamos que o HTTP organiza e d√° significado aos dados encapsulados nessa camada. Por exemplo: ao vermos um 200 tanto n√≥s quanto um client HTTP sabemos que aquela request foi realizada com sucesso. Vamos explorar isso com o cURL.

Fa√ßa uma chamada GET, utilizando o cURL, para ‚Äúgoogle.com‚Äù.

Perceba que foi retornado um 301. Isso quer dizer que existem diversos redirecionamentos que nos encaminham para o lugar certo. No caso, o caminho certo para a p√°gina do google √© www.google.com. Ao acessarmos pelo navegador, n√£o percebemos isso porque ele faz o redirecionamento para a p√°gina certa ao encontrar o 301, por√©m se voc√™ inspecionar a network vai identificar esse redirecionamento.

Fa√ßa uma nova chamada a ‚Äúgoogle.com‚Äù, por√©m agora utilizando o par√¢metro -L ou --location, que serve para ‚Äúseguir redirecionamentos‚Äù.

Solu√ß√£o proposta
Fa√ßa uma chamada GET, utilizando o cURL, para ‚Äúgoogle.com‚Äù.


 curl google.com
Perceba que foi retornado um 301. Isso quer dizer que existem diversos redirecionamentos que nos encaminham para o lugar certo. No caso, o caminho certo para a p√°gina do google √© www.google.com. Ao acessarmos pelo navegador, n√£o percebemos isso porque ele faz o redirecionamento para a p√°gina certa ao encontrar o 301, por√©m se voc√™ inspecionar a network vai identificar esse redirecionamento.

Fa√ßa uma nova chamada a ‚Äúgoogle.com‚Äù, por√©m agora utilizando o par√¢metro -L ou --location, que serve para ‚Äúseguir redirecionamentos‚Äù.


curl -L google.com
Exerc√≠cio 3
Agora utilizando o wget, pegue o conte√∫do da p√°gina do site da Trybe, depois abra o arquivo HTML baixado em seu navegador. Fa√ßa o mesmo processo com outras p√°ginas web.

Solu√ß√£o proposta

wget betrybe.com
Exerc√≠cio 4
Agora vamos para a camada de transporte. Crie um servidor TCP usando o m√≥dulo socketserver que j√° vem embutido com o Python. Nosso servidor TCP dever√°:

Responder com um ‚ÄúOl√°, client‚Äù, logo quando estabelecer uma conex√£o.

Imprimir no console todo dado recebido.

Responder com os dados recebidos (como um eco).

Utilizar a porta 8085.

Perceba que o servidor sozinho n√£o faz nada. Ele precisa que algu√©m se conecte a ele. Ent√£o para test√°-lo voc√™ pode utilizar o comando telnet localhost 8085, onde telnet √© a aplica√ß√£o que vamos utilizar, localhost √© o local onde o servidor est√° (no caso, o seu pr√≥prio PC) e 8085 √© a porta em que o servidor est√° escutando conex√µes.

üëÄ De olho nas dicas:

A documenta√ß√£o do m√≥dulo traz exemplos de como instanciar seu servidor TCP;
Na mesma documenta√ß√£o temos exemplos de classes para responder as requisi√ß√µes;
Os dados na requisi√ß√£o vem em bytes, n√£o strings! bytes podem ser decodificados em string com a codifica√ß√£o correta;
Do mesmo jeito, para responder voc√™ pode precisar codificar strings em bytes;
telnet sempre envia ASCII, j√° o netcat envia no encoding do sistema (em Linux, geralmente utf-8, mas confirme com o comando locale).
Solu√ß√£o proposta

from socketserver import TCPServer, StreamRequestHandler

ADDRESS = "", 8085

class EchoHandler(StreamRequestHandler):
    """Responde requisi√ß√µes repetindo o que foi recebido."""

    def handle(self):
        # Usar b'' √© um jeito literal de escrever bytes em ascii
        self.wfile.write(b"Hello, World!\n")
        # self.wfile e self.rfile s√£o canais de entrada e sa√≠da
        # programados para ter a mesma interface de arquivos!
        for line in self.rfile:
            # esta linha responde o cliente
            self.wfile.write(line)
            # esta linha imprime no console
            print(line.decode('ascii').strip())

if __name__ == "__main__":
    # usando with nosso TCPServer vai arrumar a casa direitinho quando encerrado
    with TCPServer(ADDRESS, EchoHandler) as server:
        server.serve_forever()
Exerc√≠cio 5
Utilizando o comando telnet ou o Netcat (nc):

Conecte no server do exerc√≠cio anterior e envie informa√ß√µes. O server dever√° imprimir as mensagens enviadas no console.

Pare o servidor e verifique o que aconteceu com a conex√£o que estava aberta com o comando telnet ou nc.

Solu√ß√£o proposta

nc -t 127.0.0.1 8085
ou


telnet 127.0.0.1 8085
Ap√≥s estabelecer a conex√£o, digite a mensagem e tecle enter para envi√°-las.

Exerc√≠cio 6
Reinicie o servidor TCP e agora fa√ßa uma requisi√ß√£o utilizando o cURL (HTTP).

Perceba o que √© exibido no console do server, j√° que n√£o estamos utilizando o HTTP nele. Perceba tamb√©m que o comando cURL n√£o recebe uma resposta HTTP com sentido (um status code 200, por exemplo), de modo que ele n√£o sabe que aquela requisi√ß√£o chegou ao fim.

Solu√ß√£o proposta

curl localhost:8085
Uma request mais legal:


curl --request POST \
    --data "{ \"foo\": \"bar\" }" \
    --header 'Content-Type: application/json' \
    --header 'Foo-Bar-Header: foo-bar' \
    localhost:8085/foo-bar
Exerc√≠cio 7
Agora vamos explorar o outro protocolo de transporte que aprendemos. Crie um servidor UDP usando o mesmo m√≥dulo socketserver. Nosso servidor UDP dever√°:

Imprimir no console toda mensagem recebida (n√£o esque√ßa de converter tamb√©m para string).

Responder com os dados recebidos (como um eco).

Utilizar a porta 8084.

üëÄ De olho nas dicas:

Todas as dicas do exerc√≠cio 4 se aplicam;
telnet n√£o funciona com udp ‚Äì use netcat.
Solu√ß√£o proposta

from socketserver import UDPServer, DatagramRequestHandler

ADDRESS = "", 8084

class EchoHandler(DatagramRequestHandler):
    """Responde requisi√ß√µes repetindo o que foi recebido."""

    def handle(self):
        for line in self.rfile:
            self.wfile.write(line)
            print(line.decode("utf-8").strip())

if __name__ == "__main__":
    with UDPServer(ADDRESS, EchoHandler) as server:
        server.serve_forever()
Exerc√≠cio 8
Envie pacotes para o servidor UDP utilizando o Netcat (nc). Em seguida pare o servidor e perceba que, como n√£o h√° conex√£o, nada √© sentido pelo client.

Solu√ß√£o proposta

nc -u 127.0.0.1 8084
Ap√≥s executar o comando, digite a mensagem e tecle enter para envi√°-las.

Exerc√≠cio 9
Fa√ßa uma chamada ao server utilizando o cURL. Lembre que, al√©m do HTTP, o comando utiliza o protocolo TCP e n√£o o UDP. Repare o que acontece.

Solu√ß√£o proposta

curl localhost:8084
Exerc√≠cio 10
Agora, vamos utilizar um tipo de proxy que pode ser bastante √∫til no nosso cotidiano como pessoas desenvolvedoras: o NGROK. Com ele conseguimos criar um t√∫nel para o nosso localhost.

Crie um servidor HTTP em sua m√°quina executando na porta 80 (pode ser um front-end ou um back-end criado em aulas anteriores).

Baixe o ngrok e extraia o arquivo baixado em uma pasta de sua prefer√™ncia, conforme instru√ß√µes do site oficial.

Conforme instru√ß√µes do site, crie um t√∫nel para a porta 80 de sua m√°quina.

Acesse o link disponibilizado em seu navegador. Utilize-o para acessar de outros dispositivos, como seu smartphone ou outro computador üòé.

hackerman
Crie um servidor HTTP em sua m√°quina executando na porta 80 (pode ser um front-end ou um back-end criado em aulas anteriores).

Solu√ß√£o proposta
Python √© um brinquedo que vem com todos os acess√≥rios, lembra? Claro que ele vem com um servidor http pronto pra usar! Vamos criar um diret√≥rio novo e rodar o servidor l√° dentro:


 mkdir diretorio && cd diretorio
 python3 -m http.server 80
Baixe o ngrok e extraia o arquivo baixado em uma pasta de sua prefer√™ncia, conforme instru√ß√µes do site oficial.


 unzip /path/to/ngrok.zip
Conforme instru√ß√µes do site, crie um t√∫nel para a porta 80 de sua m√°quina.


 ./ngrok http 80
Acesse o link disponibilizado em seu navegador. Utilize-o para acessar de outros dispositivos, como seu smartphone ou outro computador üòé.


./ngrok http 80